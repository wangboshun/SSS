using AutoMapper;
using Microsoft.Extensions.DependencyInjection;
using SSS.Domain.CQRS.Template.Command.Commands;
using SSS.Infrastructure.Util.Attribute;
using SSS.Domain.Template.Dto;
using SSS.Infrastructure.Repository.Template;
using System;
using SSS.Domain.Seedwork.EventBus;
using SSS.Domain.Seedwork.Model;
using System.Collections.Generic;
using AutoMapper.QueryableExtensions;
using System.Linq;

namespace SSS.Application.Template
{
    [DIService(ServiceLifetime.Scoped, typeof(ITemplateService))]
    public class TemplateService : ITemplateService
    {
        private readonly IMapper _mapper;
        private readonly IEventBus _bus;

        private readonly ITemplateRepository _repository;
        public TemplateService(IMapper mapper, IEventBus bus, ITemplateRepository repository)
        {
            _mapper = mapper;
            _bus = bus;
            _repository = repository;
        }
        public void AddTemplate(TemplateInputDto input)
        {
            input.id = Guid.NewGuid().ToString();
            var cmd = _mapper.Map<TemplateAddCommand>(input);
            _bus.SendCommand(cmd);
        }

		public Pages<List<TemplateOutputDto>> GetListTemplate(TemplateInputDto input) 
		{
           List<TemplateOutputDto> list;
            int count = 0;

            if (input.pagesize == 0 && input.pagesize == 0)
            {
                var temp = _repository.GetAll();
                list = _repository.GetAll().ProjectTo<TemplateOutputDto>(_mapper.ConfigurationProvider).ToList();
                count = list.Count;
            }
            else
                list = _repository.GetPage(input.pageindex, input.pagesize, ref count).ProjectTo<TemplateOutputDto>(_mapper.ConfigurationProvider).ToList();

            return new Pages<List<TemplateOutputDto>>(list, count);}
      } 
}