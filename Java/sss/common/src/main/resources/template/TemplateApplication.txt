package com.zny.common.code.template;

import cn.dev33.satoken.util.SaResult;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.toolkit.StringUtils;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.zny.common.model.PageResult;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.zny.common.utils.DateUtils;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

/**
 * @author WBS
 * Date:2022/9/2
 */

@Service
public class TemplateApplication extends ServiceImpl<TemplateMapper, TemplateModel> {

    /**
     * 添加模板
     *
     * @param templateName 模板名
     */
    public SaResult addTemplate(String templateName) {
        QueryWrapper<TemplateModel> wrapper = new QueryWrapper<TemplateModel>();
        wrapper.eq("template_name", templateName);
        TemplateModel model = this.getOne(wrapper);
        if (model != null) {
            return SaResult.error("模板名已存在！");
        }
        TemplateModel templateModel = new TemplateModel();
        templateModel.setId(UUID.randomUUID().toString());
        templateModel.setTemplate_name(templateName);
        templateModel.setCreate_time(DateUtils.dateToStr(LocalDateTime.now()));
        if (save(templateModel)) {
            return SaResult.ok("添加模板成功！");
        } else {
            return SaResult.error("添加模板失败！");
        }
    }

    /**
     * 查询模板列表
     *
     * @param templateName 模板名
     * @param pageIndex    页码
     * @param pageSize     分页大小
     */
    public PageResult getTemplatePage(String templateId, String templateName, Integer pageIndex, Integer
    pageSize) {
        pageSize = PageUtils.getPageSize(pageSize);
        pageIndex = PageUtils.getPageIndex(pageIndex);
        QueryWrapper<TemplateModel> wrapper = new QueryWrapper<TemplateModel>();
        wrapper.eq(StringUtils.isNotBlank(templateId), "id", templateId);
        wrapper.eq(StringUtils.isNotBlank(templateName), "template_name", templateName);
        Page<TemplateModel> page = new Page<>(pageIndex, pageSize);
        Page<TemplateModel> result = this.page(page, wrapper);
        PageResult pageResult = new PageResult();
        pageResult.setPages(result.getPages());
        pageResult.setRows(result.getRecords());
        pageResult.setTotal(result.getTotal());
        pageResult.setCurrent(result.getCurrent());
        return pageResult;
    }

    /**
     * 删除模板
     *
     * @param id 用户id
     */
    public SaResult deleteTemplate(String id) {
        QueryWrapper<TemplateModel> wrapper = new QueryWrapper<TemplateModel>();
        wrapper.eq("id", id);
        TemplateModel model = this.getOne(wrapper);

        if (model == null) {
            return SaResult.error("模板不存在！");
        }
        if (removeById(id)) {
            return SaResult.ok("删除模板成功！");
        } else {
            return SaResult.error("删除模板失败！");
        }
    }

    /**
     * 更新模板信息
     *
     * @param id           模板id
     * @param templateName 模板名
     */
    public SaResult updateTemplate(String id, String templateName) {
        QueryWrapper<TemplateModel> wrapper = new QueryWrapper<TemplateModel>();
        wrapper.eq("id", id);
        TemplateModel model = this.getOne(wrapper);

        if (model == null) {
            return SaResult.error("模板不存在！");
        }
        model.setTemplate_name(templateName);
        if (updateById(model)) {
            return SaResult.ok("更新模板信息成功！");
        } else {
            return SaResult.error("删除模板信息失败！");
        }
    }
}
